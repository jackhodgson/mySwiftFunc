    func secs2HMMSS(secsParam:Int) -> String {
        // Convert time in seconds to HMMSS string
    
        var localSecsParam = secsParam
        var returnValue = ""
        
        let hrs = localSecsParam / 3600
        localSecsParam = localSecsParam - (hrs * 3600)
        
        let mins = localSecsParam / 60
        localSecsParam = localSecsParam - (mins * 60)
        let minsStr = "0\(mins)"
        let r4 = Range(start:advance(minsStr.endIndex,-2), end: minsStr.endIndex)
        let minsStr2 = minsStr.substringWithRange(r4)
        
        var secs = secsParam % 60
        let secsStr = "0\(secs)"
        let r5 = Range(start:advance(secsStr.endIndex,-2), end: secsStr.endIndex)
        let secsStr2 = secsStr.substringWithRange(r5)
        
        
        if hrs > 0 {
            returnValue = "\(hrs):\(minsStr2):\(secsStr2)"
        } else {
            returnValue = "\(minsStr2):\(secsStr2)"
        }
        return returnValue
    }


    func HMMSS2Secs(HMMSS:String) -> Int {
        // Convert H:MM:SS time string to time in seconds.
        
        let parts = split(HMMSS) {$0 == ":"}
        var secs = 0
        var mins = 0
        var hrs = 0
        
        let howManyParts = parts.count
        
        if howManyParts == 3 {
            secs = parts[2].toInt()!
            mins = parts[1].toInt()!
            hrs = parts[0].toInt()!
        } else {
            secs = parts[1].toInt()!
            mins = parts[0].toInt()!
        }
        
        return ( (hrs * 3600) + (mins * 60) + secs )
    }
